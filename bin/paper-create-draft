#!/usr/bin/env zsh
#
# Usage: `paper create-draft`
#
# Must be run in a paper working directory.
# A variable `name` is required to be defined.
#
# Needs environment variables `FIGURE_SEARCH_DIRECTORIES` defined
# to collect figures and `BIBTEX_LIBRARY` to collect references.
#
# Uses PYTHONPATH variable to ensure that up-to-date python
# modules are used.
#
# Expects the following structure of paper directory:
#
# text/
#   includes.yaml     Defines figures and tables
#   abstract.md
#   figure-captions.md
#   key-points.md
#   title-block.tex
#   references.bib    *This will be rewritten if BIBTEX_LIBRARY is defined*
#   chapters/         Contains body text, which will be read in order
# paper-components/   (the path to the repository containing this script...can probably be improved)
# build/              (this will be created)
# collected-figures/  (this will be created)
# output/             (also will be created)
#
# Could do a recursive upwards search for where this is defined...
source "$PAPER_COMPONENTS/env.zsh"
name="$name-draft"

build='build'
defs="$PAPER_COMPONENTS/defs"
body="$build/body.tex"
bibfile="text/references.bib"
texfile="$build/draft.tex"
figureDefs="text/includes.yaml"
captions="$build/figure-captions.tex"
abstract="$build/abstract.tex"
build_dest="$build/$name.pdf"
auxfile="${build_dest:r}.aux"
outfile="output/$name.pdf"
preamble="$build/preamble.tex"
appendices="$build/appendices.tex"

# Temporary fix to make sure we are using GNU sed
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"

paper check-deps

echo "Creating paper '$name' in directory $(pwd)"

mkdir -p $build output

rm -f $body $captions $abstract

paper collect-includes

## Figure captions
cat text/figure-captions.md \
| text-pipeline \
> $captions

# Build abstract
cat text/abstract.md \
| text-pipeline \
> $abstract

echo "Processing body text"
# Process body text
# We can't use 'rev-text' because it doesn't support getting only the body text right now
paper get-text  \
| sed -r 's/^\\section\{(Introduction)\}/\\invisiblesection\{\1\}/g' \
| mark-inline-figures \
| text-pipeline \
| figurator inline \
  text/includes.yaml \
  --template-dir "$PAPER_COMPONENTS/includes" \
  --captions $captions \
  --collect-dir "$FIGURE_COLLECT_DIR" \
> $body

# No idea what this does but it seems to cut down on ls errors
echo "" >&2

## Title block
rm -f build/title-block.tex 
paper build-latex-title-block > build/title-block.tex


cp $defs/draft.tex $texfile

# Copy preamble
cat "$defs/preamble"/*.tex > "$preamble"
# PROCESS EXTRA PREAMBLE
if [[ $preamble_includes && ${#preamble_includes} ]]; then
  for f in ${preamble_includes[@]}; do
    if [[ -f $f ]]; then
      cat "$f" >> "$preamble"
    fi
  done
fi

keyPoints=text/key-points.md
if [ -f $keyPoints ]; then
  echo "\subsubsection*{Key Points}" >> build/key-points.tex
  cat $keyPoints \
  | text-pipeline \
  >> build/key-points.tex
else
  echo "" > build/key-points.tex
fi

## Process appendices
app_=text/appendices
a=($app_/*.md(N))
if [[ -d $app_ && ${#a} ]]; then
  echo "Processing appendices"
  aggregate-text ${a}  \
  | sed -r 's/^\\section\{(Introduction)\}/\\invisiblesection\{\1\}/g' \
  | mark-inline-figures \
  | text-pipeline \
  | figurator inline \
    text/includes.yaml \
    --template-dir "$PAPER_COMPONENTS"/includes \
    --captions $captions \
    --collect-dir $collect_dir \
  > $appendices

  # Insert the appendix at the end of the standard template
  split=2
  head -n -$split $defs/draft.tex > $texfile
  cat $defs/appendix-shim.tex >> $texfile
  tail -n $split $defs/draft.tex >> $texfile

fi

cp "$PAPER_COMPONENTS/agu-template/agufull08.bst" "$build/agufull08.bst"

paper compile-refs
echo "Running latex"
pwd
run-latex $texfile $build_dest

latex_exit_status=$?

cp $build_dest $outfile


tag --set paper-draft $outfile

scale-images $outfile "${outfile:r}-sm.pdf" "printer" 2> /dev/null

errLog="${build_dest:r}.log"
if [[ $latex_exit_status -ne 0 ]]; then
  echo "LaTeX exited with error code $latex_exit_status"
  echo "LaTeX errors (see '$errLog' for more details):"
  tail -n 100 $errLog
  exit $latex_exit_status
fi
